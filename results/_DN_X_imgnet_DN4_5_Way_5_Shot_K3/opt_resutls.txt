Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 100
Valset: 600
Testset: 600
Test-(16): [100/600]	Time 0.200 (0.192)	Loss 1.019 (0.803)	Prec@1 65.33333587646484 (69.32013396461412)
Test-(16): [200/600]	Time 0.171 (0.186)	Loss 0.585 (0.816)	Prec@1 80.0 (68.65008480394657)
Test-(16): [300/600]	Time 0.153 (0.181)	Loss 1.007 (0.813)	Prec@1 64.0 (68.7574769840684)
Test-(16): [400/600]	Time 0.172 (0.183)	Loss 0.866 (0.809)	Prec@1 70.66667175292969 (68.90773269957735)
Test-(16): [500/600]	Time 0.149 (0.182)	Loss 1.007 (0.815)	Prec@1 64.0 (68.7345329787203)
 * Prec@1 68.671 Best_prec1 0.000
============ Testing on the test set ============
Test-(16): [100/600]	Time 0.164 (0.181)	Loss 0.899 (0.779)	Prec@1 64.0 (71.30033239987817)
Test-(16): [200/600]	Time 0.146 (0.175)	Loss 0.532 (0.772)	Prec@1 80.0 (71.25041697867474)
Test-(16): [300/600]	Time 0.163 (0.175)	Loss 0.748 (0.773)	Prec@1 73.33333587646484 (71.2691053346146)
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 100
Valset: 200
Testset: 200
Test-(16): [100/200]	Time 0.164 (0.183)	Loss 0.729 (0.843)	Prec@1 76.0 (67.3267344106542)
 * Prec@1 68.007 Best_prec1 0.000
============ Testing on the test set ============
Test-(16): [100/200]	Time 0.313 (0.188)	Loss 0.564 (0.772)	Prec@1 78.66667175292969 (71.35313808327854)
 * Prec@1 70.840 Best_prec1 0.000
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Test-(16): [100/200]	Time 0.146 (0.189)	Loss 1.337 (0.812)	Prec@1 53.333335876464844 (68.60726256417756)
 * Prec@1 68.813 Best_prec1 0.000
============ Testing on the test set ============
Test-(16): [100/200]	Time 0.199 (0.177)	Loss 0.655 (0.782)	Prec@1 82.66667175292969 (70.60066279798451)
 * Prec@1 71.160 Best_prec1 0.000
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 200
Valset: 200
Testset: 200
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='train', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
Trainset: 5000
Valset: 200
Testset: 200
Test-(16): [100/200]	Time 0.119 (0.137)	Loss 1.125 (1.222)	Prec@1 78.0 (68.23762376237623)
 * Prec@1 67.730 Best_prec1 0.000
============ Testing on the test set ============
Test-(16): [100/200]	Time 0.143 (0.140)	Loss 1.025 (1.199)	Prec@1 88.0 (70.5940594059406)
 * Prec@1 70.530 Best_prec1 0.000
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 200-------------0
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 200-------------0
Test-(16): [100/200]	Time 0.119 (0.138)	Loss 1.285 (1.203)	Prec@1 62.0 (70.17821782178218)
 * Prec@1 70.840 Best_prec1 0.000
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 200-------------0
Test-(16): [100/200]	Time 0.208 (0.136)	Loss 1.385 (1.206)	Prec@1 52.0 (69.92079207920793)
 * Prec@1 69.740 Best_prec1 0.000
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.144 (0.140)	Loss 1.145 (1.198)	Prec@1 76.0 (70.63366336633663)
Test-(16): [200/600]	Time 0.113 (0.132)	Loss 1.185 (1.197)	Prec@1 72.0 (70.75621890547264)
Test-(16): [300/600]	Time 0.153 (0.131)	Loss 1.185 (1.199)	Prec@1 72.0 (70.55813953488372)
Test-(16): [400/600]	Time 0.114 (0.132)	Loss 1.145 (1.195)	Prec@1 76.0 (70.96259351620948)
Test-(16): [500/600]	Time 0.147 (0.132)	Loss 1.205 (1.196)	Prec@1 70.0 (70.91017964071857)
 * Prec@1 70.633 Best_prec1 0.000
Test accuracy 70.63333 h 0.66950816
===================================== Round 1 =====================================
Testset: 600-------------1
Test-(16): [100/600]	Time 0.135 (0.140)	Loss 1.285 (1.215)	Prec@1 62.0 (68.95049504950495)
Test-(16): [200/600]	Time 0.243 (0.135)	Loss 1.165 (1.200)	Prec@1 74.0 (70.4776119402985)
Test-(16): [300/600]	Time 0.106 (0.136)	Loss 1.285 (1.201)	Prec@1 62.0 (70.33887043189368)
Test-(16): [400/600]	Time 0.102 (0.136)	Loss 1.105 (1.198)	Prec@1 80.0 (70.67331670822942)
Test-(16): [500/600]	Time 0.129 (0.135)	Loss 1.185 (1.197)	Prec@1 72.0 (70.77844311377245)
 * Prec@1 70.797 Best_prec1 70.633
Test accuracy 70.79667 h 0.6978253
===================================== Round 2 =====================================
Testset: 600-------------2
Test-(16): [100/600]	Time 0.141 (0.139)	Loss 1.205 (1.200)	Prec@1 70.0 (70.51485148514851)
Test-(16): [200/600]	Time 0.145 (0.132)	Loss 1.245 (1.202)	Prec@1 66.0 (70.28855721393035)
Test-(16): [300/600]	Time 0.152 (0.131)	Loss 1.145 (1.203)	Prec@1 76.0 (70.2126245847176)
Test-(16): [400/600]	Time 0.135 (0.131)	Loss 1.245 (1.203)	Prec@1 66.0 (70.16458852867831)
Test-(16): [500/600]	Time 0.119 (0.131)	Loss 1.185 (1.205)	Prec@1 72.0 (69.95209580838323)
 * Prec@1 69.997 Best_prec1 70.797
Test accuracy 69.996666 h 0.74024904
===================================== Round 3 =====================================
Testset: 600-------------3
Test-(16): [100/600]	Time 0.121 (0.148)	Loss 1.145 (1.184)	Prec@1 76.0 (72.11881188118812)
Test-(16): [200/600]	Time 0.142 (0.139)	Loss 0.985 (1.194)	Prec@1 92.0 (71.04477611940298)
Test-(16): [300/600]	Time 0.118 (0.134)	Loss 1.065 (1.194)	Prec@1 84.0 (71.05647840531562)
Test-(16): [400/600]	Time 0.134 (0.133)	Loss 1.245 (1.194)	Prec@1 66.0 (71.07730673316708)
Test-(16): [500/600]	Time 0.134 (0.132)	Loss 1.245 (1.193)	Prec@1 66.0 (71.18562874251496)
 * Prec@1 71.343 Best_prec1 70.797
Test accuracy 71.34333 h 0.70900905
===================================== Round 4 =====================================
Testset: 600-------------4
Test-(16): [100/600]	Time 0.133 (0.135)	Loss 1.145 (1.174)	Prec@1 76.0 (73.12871287128714)
Test-(16): [200/600]	Time 0.133 (0.131)	Loss 1.245 (1.189)	Prec@1 66.0 (71.57213930348259)
Test-(16): [300/600]	Time 0.120 (0.129)	Loss 1.265 (1.190)	Prec@1 64.0 (71.49501661129568)
Test-(16): [400/600]	Time 0.123 (0.128)	Loss 1.185 (1.192)	Prec@1 72.0 (71.28678304239402)
Test-(16): [500/600]	Time 0.117 (0.128)	Loss 1.105 (1.194)	Prec@1 80.0 (71.08183632734531)
 * Prec@1 71.080 Best_prec1 71.343
Test accuracy 71.08 h 0.7136776
Aver_accuracy: 70.77 Aver_h 0.7060538291931152
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.128 (0.130)	Loss 1.185 (1.212)	Prec@1 72.0 (69.24752475247524)
Test-(16): [200/600]	Time 0.147 (0.122)	Loss 1.105 (1.202)	Prec@1 80.0 (70.23880597014926)
Test-(16): [300/600]	Time 0.124 (0.119)	Loss 1.245 (1.201)	Prec@1 66.0 (70.4186046511628)
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.113 (0.128)	Loss 1.245 (1.207)	Prec@1 66.0 (69.78217821782178)
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.110 (0.130)	Loss 1.185 (1.194)	Prec@1 72.0 (71.08910891089108)
Test-(16): [200/600]	Time 0.119 (0.123)	Loss 1.145 (1.198)	Prec@1 76.0 (70.64676616915423)
Test-(16): [300/600]	Time 0.102 (0.121)	Loss 1.145 (1.195)	Prec@1 76.0 (70.96345514950166)
Test-(16): [400/600]	Time 0.127 (0.120)	Loss 1.145 (1.191)	Prec@1 76.0 (71.36159600997506)
Test-(16): [500/600]	Time 0.108 (0.119)	Loss 1.165 (1.194)	Prec@1 74.0 (71.1057884231537)
 * Prec@1 71.157 Best_prec1 0.000
Test accuracy 71.15667 h 0.69605505
===================================== Round 1 =====================================
Testset: 600-------------1
Test-(16): [100/600]	Time 0.096 (0.132)	Loss 1.165 (1.207)	Prec@1 74.0 (69.8019801980198)
Test-(16): [200/600]	Time 0.135 (0.124)	Loss 1.305 (1.199)	Prec@1 60.0 (70.54726368159204)
Test-(16): [300/600]	Time 0.093 (0.122)	Loss 1.185 (1.202)	Prec@1 72.0 (70.27906976744185)
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.112 (0.127)	Loss 1.145 (1.211)	Prec@1 76.0 (69.36633663366337)
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.124 (0.129)	Loss 1.245 (1.197)	Prec@1 66.0 (70.73267326732673)
Test-(16): [200/600]	Time 0.117 (0.121)	Loss 1.285 (1.201)	Prec@1 62.0 (70.35820895522389)
Test-(16): [300/600]	Time 0.144 (0.119)	Loss 1.145 (1.200)	Prec@1 76.0 (70.43853820598007)
Test-(16): [400/600]	Time 0.105 (0.118)	Loss 1.205 (1.201)	Prec@1 70.0 (70.4139650872818)
Test-(16): [500/600]	Time 0.129 (0.118)	Loss 1.285 (1.200)	Prec@1 62.0 (70.46706586826348)
 * Prec@1 70.560 Best_prec1 0.000
Test accuracy 70.56 h 0.68850994
===================================== Round 1 =====================================
Testset: 600-------------1
Test-(16): [100/600]	Time 0.108 (0.126)	Loss 1.225 (1.190)	Prec@1 68.0 (71.5049504950495)
Test-(16): [200/600]	Time 0.114 (0.122)	Loss 1.125 (1.196)	Prec@1 78.0 (70.92537313432835)
Test-(16): [300/600]	Time 0.097 (0.119)	Loss 1.145 (1.191)	Prec@1 76.0 (71.38205980066445)
Test-(16): [400/600]	Time 0.130 (0.118)	Loss 1.245 (1.194)	Prec@1 66.0 (71.06733167082294)
Test-(16): [500/600]	Time 0.127 (0.117)	Loss 1.185 (1.194)	Prec@1 72.0 (71.08582834331337)
 * Prec@1 71.307 Best_prec1 70.560
Test accuracy 71.30666 h 0.7189768
===================================== Round 2 =====================================
Testset: 600-------------2
Test-(16): [100/600]	Time 0.140 (0.125)	Loss 1.285 (1.212)	Prec@1 62.0 (69.26732673267327)
Test-(16): [200/600]	Time 0.122 (0.122)	Loss 1.065 (1.202)	Prec@1 84.0 (70.23880597014926)
Test-(16): [300/600]	Time 0.118 (0.122)	Loss 1.145 (1.202)	Prec@1 76.0 (70.30564784053156)
Test-(16): [400/600]	Time 0.098 (0.121)	Loss 1.165 (1.204)	Prec@1 74.0 (70.03990024937656)
Test-(16): [500/600]	Time 0.128 (0.120)	Loss 1.245 (1.202)	Prec@1 66.0 (70.32335329341318)
 * Prec@1 70.257 Best_prec1 71.307
Test accuracy 70.25667 h 0.70038337
===================================== Round 3 =====================================
Testset: 600-------------3
Test-(16): [100/600]	Time 0.106 (0.125)	Loss 1.385 (1.197)	Prec@1 52.0 (70.75247524752476)
Test-(16): [200/600]	Time 0.113 (0.122)	Loss 1.285 (1.202)	Prec@1 62.0 (70.32835820895522)
Test-(16): [300/600]	Time 0.110 (0.121)	Loss 1.165 (1.202)	Prec@1 74.0 (70.27906976744185)
Test-(16): [400/600]	Time 0.150 (0.120)	Loss 1.205 (1.200)	Prec@1 70.0 (70.49376558603491)
Test-(16): [500/600]	Time 0.106 (0.120)	Loss 1.085 (1.200)	Prec@1 82.0 (70.50299401197604)
 * Prec@1 70.447 Best_prec1 71.307
Test accuracy 70.44666 h 0.7015761
===================================== Round 4 =====================================
Testset: 600-------------4
Test-(16): [100/600]	Time 0.107 (0.124)	Loss 1.265 (1.188)	Prec@1 64.0 (71.68316831683168)
Test-(16): [200/600]	Time 0.115 (0.120)	Loss 1.145 (1.188)	Prec@1 76.0 (71.71144278606965)
Test-(16): [300/600]	Time 0.136 (0.119)	Loss 1.185 (1.192)	Prec@1 72.0 (71.29568106312293)
Test-(16): [400/600]	Time 0.118 (0.118)	Loss 1.165 (1.193)	Prec@1 74.0 (71.2069825436409)
Test-(16): [500/600]	Time 0.119 (0.118)	Loss 1.145 (1.195)	Prec@1 76.0 (71.02994011976048)
 * Prec@1 71.007 Best_prec1 71.307
Test accuracy 71.00667 h 0.6904099
Aver_accuracy: 70.71533 Aver_h 0.6999712228775025
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.100 (0.128)	Loss 1.005 (1.185)	Prec@1 90.0 (71.98019801980197)
Test-(16): [200/600]	Time 0.107 (0.122)	Loss 1.085 (1.196)	Prec@1 82.0 (70.91542288557214)
Test-(16): [300/600]	Time 0.119 (0.120)	Loss 1.325 (1.197)	Prec@1 58.0 (70.74418604651163)
Test-(16): [400/600]	Time 0.110 (0.120)	Loss 1.205 (1.195)	Prec@1 70.0 (70.93266832917706)
Test-(16): [500/600]	Time 0.096 (0.119)	Loss 1.125 (1.193)	Prec@1 78.0 (71.17365269461078)
 * Prec@1 71.053 Best_prec1 0.000
Test accuracy 71.05334 h 0.72816294
===================================== Round 1 =====================================
Testset: 600-------------1
Test-(16): [100/600]	Time 0.129 (0.123)	Loss 1.065 (1.181)	Prec@1 84.0 (72.35643564356435)
Test-(16): [200/600]	Time 0.098 (0.119)	Loss 1.185 (1.187)	Prec@1 72.0 (71.78109452736318)
Test-(16): [300/600]	Time 0.143 (0.118)	Loss 1.065 (1.187)	Prec@1 84.0 (71.74086378737542)
Test-(16): [400/600]	Time 0.096 (0.117)	Loss 1.285 (1.195)	Prec@1 62.0 (71.02743142144638)
Test-(16): [500/600]	Time 0.114 (0.118)	Loss 1.165 (1.195)	Prec@1 74.0 (70.93812375249502)
 * Prec@1 71.143 Best_prec1 71.053
Test accuracy 71.14333 h 0.7025803
===================================== Round 2 =====================================
Testset: 600-------------2
Test-(16): [100/600]	Time 0.133 (0.128)	Loss 1.285 (1.179)	Prec@1 62.0 (72.5940594059406)
Test-(16): [200/600]	Time 0.127 (0.125)	Loss 1.345 (1.185)	Prec@1 56.0 (71.96019900497512)
Test-(16): [300/600]	Time 0.106 (0.124)	Loss 1.125 (1.192)	Prec@1 78.0 (71.30232558139535)
Test-(16): [400/600]	Time 0.128 (0.122)	Loss 1.105 (1.195)	Prec@1 80.0 (70.9576059850374)
Test-(16): [500/600]	Time 0.150 (0.121)	Loss 1.065 (1.195)	Prec@1 84.0 (71.01796407185628)
 * Prec@1 71.027 Best_prec1 71.143
Test accuracy 71.026665 h 0.73117286
===================================== Round 3 =====================================
Testset: 600-------------3
Test-(16): [100/600]	Time 0.107 (0.127)	Loss 1.065 (1.205)	Prec@1 84.0 (70.0)
Test-(16): [200/600]	Time 0.110 (0.123)	Loss 1.205 (1.201)	Prec@1 70.0 (70.34825870646766)
Test-(16): [300/600]	Time 0.106 (0.121)	Loss 1.165 (1.203)	Prec@1 74.0 (70.15946843853821)
Test-(16): [400/600]	Time 0.103 (0.121)	Loss 1.225 (1.204)	Prec@1 68.0 (70.09476309226933)
Test-(16): [500/600]	Time 0.111 (0.121)	Loss 1.185 (1.205)	Prec@1 72.0 (70.00399201596807)
 * Prec@1 70.030 Best_prec1 71.143
Test accuracy 70.03 h 0.7103564
===================================== Round 4 =====================================
Testset: 600-------------4
Test-(16): [100/600]	Time 0.111 (0.127)	Loss 1.165 (1.195)	Prec@1 74.0 (71.02970297029702)
Test-(16): [200/600]	Time 0.133 (0.122)	Loss 1.185 (1.192)	Prec@1 72.0 (71.29353233830845)
Test-(16): [300/600]	Time 0.108 (0.120)	Loss 1.205 (1.192)	Prec@1 70.0 (71.25581395348837)
Test-(16): [400/600]	Time 0.097 (0.119)	Loss 1.385 (1.192)	Prec@1 52.0 (71.3067331670823)
Test-(16): [500/600]	Time 0.138 (0.119)	Loss 1.065 (1.190)	Prec@1 84.0 (71.437125748503)
 * Prec@1 71.277 Best_prec1 71.143
Test accuracy 71.276665 h 0.6934661
Aver_accuracy: 70.906 Aver_h 0.7131477236747742
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=False, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.113 (0.126)	Loss 1.305 (1.204)	Prec@1 60.0 (70.05940594059406)
Test-(16): [200/600]	Time 0.134 (0.122)	Loss 1.165 (1.200)	Prec@1 74.0 (70.50746268656717)
Test-(16): [300/600]	Time 0.095 (0.120)	Loss 1.045 (1.198)	Prec@1 86.0 (70.6843853820598)
Test-(16): [400/600]	Time 0.102 (0.119)	Loss 1.145 (1.193)	Prec@1 76.0 (71.17705735660847)
Test-(16): [500/600]	Time 0.116 (0.118)	Loss 1.065 (1.194)	Prec@1 84.0 (71.12574850299401)
 * Prec@1 70.920 Best_prec1 0.000
Test accuracy 70.92 h 0.7046583
===================================== Round 1 =====================================
Testset: 600-------------1
Test-(16): [100/600]	Time 0.114 (0.127)	Loss 1.145 (1.200)	Prec@1 76.0 (70.43564356435644)
Test-(16): [200/600]	Time 0.101 (0.120)	Loss 1.225 (1.197)	Prec@1 68.0 (70.7363184079602)
Test-(16): [300/600]	Time 0.148 (0.118)	Loss 1.225 (1.205)	Prec@1 68.0 (70.0265780730897)
Test-(16): [400/600]	Time 0.106 (0.117)	Loss 1.125 (1.208)	Prec@1 78.0 (69.73067331670823)
Test-(16): [500/600]	Time 0.099 (0.116)	Loss 1.345 (1.205)	Prec@1 56.0 (69.99600798403193)
 * Prec@1 70.220 Best_prec1 70.920
Test accuracy 70.22 h 0.7317846
===================================== Round 2 =====================================
Testset: 600-------------2
Test-(16): [100/600]	Time 0.100 (0.126)	Loss 1.225 (1.186)	Prec@1 68.0 (71.84158415841584)
Test-(16): [200/600]	Time 0.101 (0.120)	Loss 1.405 (1.183)	Prec@1 50.0 (72.16915422885572)
Test-(16): [300/600]	Time 0.119 (0.119)	Loss 1.145 (1.184)	Prec@1 76.0 (72.06644518272425)
Test-(16): [400/600]	Time 0.103 (0.119)	Loss 1.205 (1.184)	Prec@1 70.0 (72.05985037406484)
Test-(16): [500/600]	Time 0.103 (0.118)	Loss 1.185 (1.189)	Prec@1 72.0 (71.58083832335329)
 * Prec@1 71.617 Best_prec1 70.920
Test accuracy 71.61667 h 0.70623803
===================================== Round 3 =====================================
Testset: 600-------------3
Test-(16): [100/600]	Time 0.116 (0.130)	Loss 1.145 (1.191)	Prec@1 76.0 (71.4059405940594)
Test-(16): [200/600]	Time 0.111 (0.124)	Loss 1.145 (1.193)	Prec@1 76.0 (71.1542288557214)
Test-(16): [300/600]	Time 0.122 (0.121)	Loss 1.125 (1.190)	Prec@1 78.0 (71.47508305647841)
Test-(16): [400/600]	Time 0.122 (0.120)	Loss 1.265 (1.192)	Prec@1 64.0 (71.3067331670823)
Test-(16): [500/600]	Time 0.122 (0.120)	Loss 1.205 (1.194)	Prec@1 70.0 (71.07784431137725)
 * Prec@1 71.213 Best_prec1 71.617
Test accuracy 71.21333 h 0.7000785
===================================== Round 4 =====================================
Testset: 600-------------4
Test-(16): [100/600]	Time 0.114 (0.132)	Loss 1.165 (1.213)	Prec@1 74.0 (69.12871287128714)
Test-(16): [200/600]	Time 0.107 (0.126)	Loss 1.325 (1.206)	Prec@1 58.0 (69.91044776119404)
Test-(16): [300/600]	Time 0.185 (0.126)	Loss 1.125 (1.204)	Prec@1 78.0 (70.11960132890366)
Test-(16): [400/600]	Time 0.097 (0.125)	Loss 1.145 (1.199)	Prec@1 76.0 (70.54862842892769)
Test-(16): [500/600]	Time 0.106 (0.128)	Loss 1.185 (1.199)	Prec@1 72.0 (70.53493013972056)
 * Prec@1 70.463 Best_prec1 71.617
Test accuracy 70.46333 h 0.72168547
Aver_accuracy: 70.886665 Aver_h 0.7128889799118042
Namespace(arch='DN_X', config='../models/architectures/configs/DN4_Vanilla_miniImage.yaml', dengine=True, dataset_dir='../dataset/miniImageNet', data_name='imgnet', mode='test', resume='../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar', epochs=0, cuda=True, ngpu=1, print_freq=100, outf='../results/_DN_X_imgnet_DN4_5_Way_5_Shot_K3')
=> loaded checkpoint '../results/DN4_miniImageNet_Conv64F_5Way_5Shot_K3/model_best.pth.tar' (epoch 16)
DN_X(
  (BACKBONE): FourLayer_64F(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.2, inplace=True)
      (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): LeakyReLU(negative_slope=0.2, inplace=True)
      (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): LeakyReLU(negative_slope=0.2, inplace=True)
      (11): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (13): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (criterion): CrossEntropyLoss()
  )
  (DE): RandomForestHead()
)
===================================== Round 0 =====================================
Testset: 600-------------0
Test-(16): [100/600]	Time 0.128 (0.135)	Loss 1.165 (1.206)	Prec@1 74.0 (69.86138613861387)
Test-(16): [200/600]	Time 0.102 (0.130)	Loss 1.185 (1.202)	Prec@1 72.0 (70.24875621890547)
Test-(16): [300/600]	Time 0.122 (0.128)	Loss 1.165 (1.198)	Prec@1 74.0 (70.73089700996678)
Test-(16): [400/600]	Time 0.126 (0.127)	Loss 1.245 (1.195)	Prec@1 66.0 (71.01246882793018)
Test-(16): [500/600]	Time 0.123 (0.127)	Loss 1.265 (1.191)	Prec@1 64.0 (71.42115768463074)
 * Prec@1 71.467 Best_prec1 0.000
Test accuracy 71.46667 h 0.70661396
===================================== Round 1 =====================================
Testset: 600-------------1
Test-(16): [100/600]	Time 0.140 (0.139)	Loss 1.465 (1.209)	Prec@1 44.0 (69.54455445544555)
Test-(16): [200/600]	Time 0.137 (0.133)	Loss 1.185 (1.205)	Prec@1 72.0 (69.95024875621891)
Test-(16): [300/600]	Time 0.114 (0.131)	Loss 1.265 (1.205)	Prec@1 64.0 (70.01993355481727)
Test-(16): [400/600]	Time 0.111 (0.129)	Loss 1.125 (1.202)	Prec@1 78.0 (70.28428927680798)
Test-(16): [500/600]	Time 0.153 (0.129)	Loss 1.145 (1.200)	Prec@1 76.0 (70.43512974051896)
 * Prec@1 70.650 Best_prec1 71.467
Test accuracy 70.65 h 0.70947236
===================================== Round 2 =====================================
Testset: 600-------------2
Test-(16): [100/600]	Time 0.114 (0.141)	Loss 1.305 (1.210)	Prec@1 60.0 (69.44554455445545)
Test-(16): [200/600]	Time 0.102 (0.133)	Loss 1.245 (1.203)	Prec@1 66.0 (70.1592039800995)
Test-(16): [300/600]	Time 0.110 (0.131)	Loss 1.225 (1.197)	Prec@1 68.0 (70.77740863787375)
Test-(16): [400/600]	Time 0.155 (0.130)	Loss 1.065 (1.197)	Prec@1 84.0 (70.76309226932668)
Test-(16): [500/600]	Time 0.118 (0.130)	Loss 1.145 (1.195)	Prec@1 76.0 (70.96606786427145)
 * Prec@1 71.023 Best_prec1 71.467
Test accuracy 71.02333 h 0.7171242
===================================== Round 3 =====================================
Testset: 600-------------3
Test-(16): [100/600]	Time 0.165 (0.139)	Loss 0.985 (1.168)	Prec@1 92.0 (73.64356435643565)
Test-(16): [200/600]	Time 0.134 (0.136)	Loss 1.205 (1.178)	Prec@1 70.0 (72.69651741293532)
Test-(16): [300/600]	Time 0.114 (0.133)	Loss 1.205 (1.181)	Prec@1 70.0 (72.39202657807309)
Test-(16): [400/600]	Time 0.125 (0.132)	Loss 1.225 (1.184)	Prec@1 68.0 (72.11970074812967)
Test-(16): [500/600]	Time 0.110 (0.131)	Loss 1.205 (1.187)	Prec@1 70.0 (71.78043912175649)
 * Prec@1 71.457 Best_prec1 71.467
Test accuracy 71.456665 h 0.7236433
===================================== Round 4 =====================================
Testset: 600-------------4
Test-(16): [100/600]	Time 0.139 (0.139)	Loss 1.265 (1.205)	Prec@1 64.0 (70.0)
Test-(16): [200/600]	Time 0.136 (0.134)	Loss 1.005 (1.201)	Prec@1 90.0 (70.40796019900498)
Test-(16): [300/600]	Time 0.114 (0.131)	Loss 1.245 (1.202)	Prec@1 66.0 (70.27906976744185)
Test-(16): [400/600]	Time 0.136 (0.130)	Loss 1.325 (1.201)	Prec@1 58.0 (70.36907730673316)
Test-(16): [500/600]	Time 0.128 (0.129)	Loss 1.305 (1.200)	Prec@1 60.0 (70.51896207584831)
 * Prec@1 70.767 Best_prec1 71.467
Test accuracy 70.76667 h 0.71183443
Aver_accuracy: 71.07267 Aver_h 0.7137376546859742
